#########################################################################
# Title:         Cloudbox: Backup | Cloudbox Restore Service            #
# Author(s):     desimaniac, l3uddz                                     #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
# Restore Service Tasks
# This file contains tasks for backing up configuration files to the Cloudbox Restore Service.

# Install curl, which is required for uploading the files.
- name: Restore Service | Install 'curl'
  apt: "name=curl state=present"

# Set the username and password for the restore service.
- name: Restore Service | Set variables
  set_fact:
    restore_service_username: "{{ restore_service.user | hash('sha1') }}"
    restore_service_password: "{{ restore_service.pass }}"

# Clean up the temporary directory used for the restore service.
- name: Restore Service | Cleanup '/tmp/restore_service' path
  file: "path='/tmp/restore_service' state=absent"

# Create the temporary directory for the restore service.
- name: Restore Service | Create '/tmp/restore_service' path
  file: "path='/tmp/restore_service' state=directory mode=0775 owner={{ user.name }} group={{ user.name }}"

# Clean up another temporary directory.
- name: Restore Service | Cleanup '/tmp/restore_service_temp' path
  file: "path='/tmp/restore_service_temp' state=absent"

# Create the other temporary directory.
- name: Restore Service | Create '/tmp/restore_service_temp' path
  file: "path='/tmp/restore_service_temp' state=directory mode=0775 owner={{ user.name }} group={{ user.name }}"

# Copy the configuration files to the temporary directory.
- name: Restore Service | Copy Files to '/tmp/restore_service_temp' path
  shell: cp '{{ item }}' '/tmp/restore_service_temp/'
  args:
    warn: no
  become: yes
  become_user: "{{ user.name }}"
  ignore_errors: yes
  with_items:
   - "{{ playbook_dir }}/ansible.cfg"
   - "{{ playbook_dir }}/accounts.yml"
   - "{{ playbook_dir }}/settings.yml"
   - "{{ playbook_dir }}/adv_settings.yml"
   - "{{ playbook_dir }}/backup_config.yml"
   - "/home/{{ user.name }}/.ansible_vault"
   - "/home/{{ user.name }}/.config/rclone/rclone.conf"

# Encrypt the configuration files using OpenSSL.
- name: Restore Service | Encrypt config file(s)
  shell: "openssl enc -aes-256-cbc -salt -md md5 -in '{{ item }}' -out '/tmp/restore_service/{{ (item | basename) | regex_replace('^\\.', '') }}.enc' -k '{{ restore_service_password }}'"
  args:
    warn: no
  become: yes
  become_user: "{{ user.name }}"
  ignore_errors: yes
  with_fileglob:
    - "/tmp/restore_service_temp/*"

# Validate that the files were encrypted successfully.
- name: "Restore Service | Validate config file(s) for encryption."
  shell: "head -c 10 {{ item }} | grep -q Salted"
  register: encryption_check
  ignore_errors: yes
  failed_when: encryption_check.rc > 1
  with_fileglob:
    - "/tmp/restore_service/*"

# Create lists of encrypted and unencrypted files.
- name: Restore Service | Set variables
  set_fact:
    unencrypted_files_list: "{{ encryption_check.results | selectattr('rc', 'equalto', 1) | map(attribute='item') | map('regex_replace', '^/tmp/restore_service/|.enc$','') | list | sort(case_sensitive=False) | join(', ') }} "
    encrypted_files_list: "{{ encryption_check.results | selectattr('rc', 'equalto', 0) | map(attribute='item') | map('regex_replace', '^/tmp/restore_service/|.enc$','') | list | sort(case_sensitive=False) | join(', ') }} "

# If any files were not encrypted successfully, print an error message and skip the upload.
- name: Restore Service | Print error message when config file(s) were not encrypted successfully
  debug:
    msg:
      - "The following config file(s) were NOT encrypted successfully: '{{ unencrypted_files_list | trim }}'"
      - "Cloudbox Restore Service will now be skipped."
  when: (unencrypted_files_list | trim | length > 0)

# Send a notification if any files were not encrypted successfully.
- name: "Restore Service | Notify | Cloudbox Backup: Config files were not encrypted successfully encrypted"
  include_role:
    name: notify
  vars:
    message: "Cloudbox Backup: The following config file(s) were NOT encrypted successfully: '{{ unencrypted_files_list | trim }}'. Restore Service will now be skipped."
  when: (unencrypted_files_list | trim | length > 0)

# Print a message with the list of successfully encrypted files.
- name: Restore Service | Print error message when config file(s) were encrypted successfully
  debug:
    msg:
      - "The following config file(s) were encrypted successfully: '{{ encrypted_files_list | trim }}'"
  when: (encrypted_files_list | trim | length > 0)

# This block uploads the encrypted files to the restore service.
- name: Restore Service | Restore Service Upload Tasks
  block:

  # Upload the encrypted configuration files.
  - name: Restore Service | Upload encrypted config file(s)
    shell: "curl -F 'file=@{{ item }}' 'http://restore.cloudbox.works/save/{{ restore_service_username }}/{{ (item | basename | splitext)[0] }}'"
    args:
      warn: no
    with_fileglob:
      - "/tmp/restore_service/*"
    register: files_upload

  # Create a list of files that were too large to upload.
  - name: Restore Service | Set 'files_too_large_to_upload_list' variable
    set_fact:
      files_too_large_to_upload_list: "{{ files_upload.results | selectattr('stdout', 'search', 'too large') | map(attribute='item') | map('regex_replace', '^/tmp/restore_service/|.enc$','') | list | sort(case_sensitive=False) | join(', ') }} "

  # Print an error message if any files were too large to upload.
  - name: Restore Service | Print error mesage when config file(s) were too large to upload
    debug:
      msg: "The following encrypted config file(s) were too large to upload to the Cloudbox Restore Service: '{{ files_too_large_to_upload_list | trim }}'"
    when: (files_too_large_to_upload_list | trim | length > 0)

  # Send a notification if any files were too large to upload.
  - name: "Restore Service | Notify | Cloudbox Backup: Config files were too large to upload to the Cloudbox Restore Service"
    include_role:
      name: notify
    vars:
      message: "Cloudbox Backup: The following encrypted config file(s) were too large to upload to the Cloudbox Restore Service: '{{ files_too_large_to_upload_list | trim }}'"
    when: (files_too_large_to_upload_list | trim | length > 0)

  # Create a list of files that were successfully uploaded.
  - name: Restore Service | Set 'files_uploaded_list' variable
    set_fact:
      files_uploaded_list: "{{ files_upload.results | selectattr('stdout', 'search', 'Successfull') | map(attribute='item') | map('regex_replace', '^/tmp/restore_service/|.enc$','') | list | sort(case_sensitive=False) | join(', ') }} "

  # Print a success message with the list of uploaded files.
  - name: Restore Service | Print success message when config file(s) were successfully uploaded
    debug:
      msg: "The following encrypted config file(s) were successfully uploaded to the Cloudbox Restore Service: '{{ files_uploaded_list | trim }}'"
    when: (files_uploaded_list | trim | length > 0)

  # Send a notification that the files were successfully uploaded.
  - name: "Restore Service | Notify | Cloudbox Backup: Config files were successfully encrypted and uploaded to the Cloudbox Restore Service"
    include_role:
      name: notify
    vars:
      message: "Cloudbox Backup: Config files uploaded to the Cloudbox Restore Service."
    when: (files_uploaded_list | trim | length > 0)

  when:
    - (unencrypted_files_list | trim | length == 0)
    - (encrypted_files_list | trim | length > 0)
